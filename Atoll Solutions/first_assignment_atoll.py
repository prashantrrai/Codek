# -*- coding: utf-8 -*-
"""First Assignment Atoll.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jlgUifJrRsk6N2p9bhvTQ5Yz4WsO_WFD

# Simple Codec
Here is a simple coding scheme designed for wireless communication between a smart lock and
an Android/iOS application: Each letter in the alphabet is assigned a number from 1 to 26,
alphabetically. Given any upper-case word, it is encoded it as follows:
- Odd numbered letters are replaced by their alphabetic opposite.
- Even numbered letters are replaced by two characters - itself, and its opposite.


Input data Encoded Output
ABC ZBYX
XYZ XCBZA
GHI THSR
NOP NMLPK
JKL JQPLO
UTS FTGH


Your exercise is to code two functions:
- Encode: this will take an upper case string, and return the encoded string according to the
scheme described above.
- Decode: this will take a string encoded as above, and return the decoded string.
The implementation will be in the language of your choice - C, Python or Javascript. You are
expected to test the code with the examples given above. Once you are done, please share the
encode and decode functions along with the test functions.
"""

print("Hello, world")

# data = input("Enter the String: ")
data = 'ABC'

conversion_code = {
 
    # Uppercase Alphabets
    'A': 'Z', 'B': 'Y', 'C': 'X', 'D': 'W', 'E': 'V', 'F': 'U',
    'G': 'T', 'H': 'S', 'I': 'R', 'J': 'Q', 'K': 'P', 'L': 'O',
    'M': 'N', 'N': 'M', 'O': 'L', 'P': 'K', 'Q': 'J', 'R': 'I',
    'S': 'H', 'T': 'G', 'U': 'F', 'V': 'E', 'W': 'D', 'X': 'C',
    'Y': 'B', 'Z': 'A'
}


converted_data = ""

 
for i in range(0, len(data)):
  if data[i] %2 != 0:

    if data[i] in conversion_code.keys():
        converted_data += conversion_code[data[i]]
    else:
        converted_data += data[i]

  else:
    converted_data += (data[i] + conversion_code[data[i]])

    

 
# Printing converted output
print("This is your Encoded String: ",converted_data)

conversion_code = {
 
    # Uppercase Alphabets
    'A': 'Z',
    'B': 'Y',
    'C': 'X',
    'D': 'W',
    'E': 'V',
    'F': 'U',
    'G': 'T',
    'H': 'S',
    'I': 'R',
    'J': 'Q',
    'K': 'P',
    'L': 'O',
    'M': 'N',
    'N': 'M',
    'O': 'L',
    'P': 'K',
    'Q': 'J',
    'R': 'I',
    'S': 'H',
    'T': 'G',
    'U': 'F',
    'V': 'E',
    'W': 'D',
    'X': 'C',
    'Y': 'B',
    'Z': 'A'
}


def encode(msg):

    encoded_msg = ""

    #Encoding Logic
    for i in range(0, len(msg)):

        if ord(msg[i]) % 2 == 0:
            encoded_msg = encoded_msg + (msg[i] + conversion_code[msg[i]])

        else:
            if msg[i] in conversion_code.keys():
                encoded_msg = encoded_msg + conversion_code[msg[i]]
            else:
                encoded_msg += msg[i]

    return(encoded_msg)



print(encode("ABC"))



def decode(code):

    decoded_msg= ""
    
    #Decoding Logic
    i = 0
    while i < len(code):

        if (((i+1)<len(code)) and (conversion_code[code[i]] == code[i+1])):

            decoded_msg = decoded_msg + code[i]
            i=i+1
             

        else:
            decoded_msg = decoded_msg + conversion_code[code[i]] 

        i = i + 1

    return decoded_msg



print(decode("ZBYX"))


test_data = {
    'ABC': 'ZBYX',
    'XYZ': 'XCBZA',
    'GHI': 'THSR',
    'NOP': 'NMLPK',
    'JKL': 'JQPLO',
    'UTS': 'FTGH',
}

def testfunction():
    

    print('\ntest encode function')
    for x in test_data:

        print (x, ':', test_data.get(x), bool(test_data.get(x)
               == encode(x)))


    print('\ntest decode function')
    for (key, value) in test_data.items():

        print (value, ':', key, bool(key == decode(value)))



testfunction()